import { Message } from "@/types/chat";

export const sampleMessages: {
  chat_session_id: string;
  messages: Message[];
}[] = [
  {
    chat_session_id: "dabc30fb-3c48-4192-b07e-abd59274c2cb",
    messages: [
      {
        role: "user",
        content: "Reactとは何ですか？",
        llm_model: "",
      },
      {
        role: "assistant",
        content: `## 🌟 Reactとは何ですか？

Reactは、ユーザーインターフェースを効率的に構築するためのJavaScriptライブラリです。主にシングルページアプリケーション（SPA）など、動的なWebアプリケーションの開発に利用されており、Facebookによって開発・メンテナンスされています😊。

### 🔍 Reactの主要な特徴

- **コンポーネントベース設計**  
  UIを再利用可能な小さな部品（コンポーネント）に分割することで、コードの再利用性や保守性が向上します。

- **仮想DOM（Virtual DOM）**  
  実際のDOMに直接操作を加えるのではなく、仮想DOM上で最小限の変更を検出して反映させるため、高速なレンダリングが可能です。

- **単方向データフロー**  
  データは一方向に流れるため、状態管理がシンプルになり、アプリケーションの動作を把握しやすくなります。

- **豊富なエコシステム**  
  Redux（状態管理ライブラリ）やReact Router（ルーティングライブラリ）など、多数のサードパーティライブラリが存在し、拡張性が高いです。

### 🛠 Reactの活用例

- **シングルページアプリケーション（SPA）**  
  インタラクティブで応答性の高いWebアプリケーションの開発に最適です。

- **モバイルアプリケーション**  
  React Nativeを使うことで、iOSやAndroid向けのモバイルアプリを効率的に開発できます。

- **大規模なWebアプリケーション**  
  コンポーネント単位で管理できるため、大規模プロジェクトでもコードの互換性や保守性が高いです。

### 📚 さらなる学習リソース

- [React公式ドキュメント](https://ja.reactjs.org/)  
  Reactのコンセプトや使い方を詳しく学ぶことができます。

- オンラインチュートリアルや動画講座  
  実際に手を動かしながら学べるので、理解が深まります。

Reactはそのシンプルさと柔軟性から、幅広いプロジェクトで利用されており、現代のWeb開発において重要な技術の一つとなっています。🚀`,
        llm_model: "o3-mini",
      },
      {
        role: "user",
        content: "コンポーネントベース設計とは？",
        llm_model: "",
      },
      {
        role: "assistant",
        content: `## 🌟 コンポーネントベース設計とは？

コンポーネントベース設計は、Webアプリケーションやユーザーインターフェースを小さい部品（コンポーネント）に分割して構築するアプローチです。これにより、コードの再利用性や保守性が向上し、開発効率が大幅にアップします🚀。

### 🔍 主要なポイント

- **再利用可能性**  
  一度作成したコンポーネントは複数の場所やプロジェクトで再利用できるため、毎回同じ機能を開発する手間が省けます。

- **独立性**  
  コンポーネントはそれぞれ責任範囲が明確で、他のコンポーネントから独立して開発・テスト・保守ができます。これにより、大規模なアプリケーションでも管理がしやすくなります。

- **カプセル化**  
  コンポーネント内でロジックやスタイルが独自に定義され、外部に影響を与えにくくなります。これにより、予期せぬ副作用を防ぎ、バグの発生リスクが低減されます。

- **単方向データフローとの連携**  
  多くのモダンなフレームワーク（例えばReact）では、コンポーネント間でのデータの流れが明確に、一方向に整理されています。これにより、データの流れや変更の追跡が容易になります。

### 🌈 メリットと活用例

- **メリット**  
  - 開発が効率化し、チーム内での協力がしやすくなります。  
  - UIの一部を変更しても、他の部分に影響を与えにくいため、バグ修正や機能追加がスムーズです。  
  - テストが個々のコンポーネント単位で行えるため、品質管理が向上します。

- **活用例**  
  - **Webアプリケーション**：複雑なUIをシンプルな部品に分解することで、管理しやすい設計となります。  
  - **モバイルアプリ**：React Nativeのようなフレームワークでは、同じコンポーネント設計を採用することでプラットフォーム間の一貫性が保たれます。

このように、コンポーネントベース設計は現代のフロントエンド開発において非常に重要な考え方となっており、効率的でスケーラブルなアプリケーションを構築するための強力な手法です！😊`,
        llm_model: "o3-mini",
      },
      {
        role: "user",
        content: "コードを用いて教えて",
        llm_model: "",
      },
      {
        role: "assistant",
        content: `## 🚀 コンポーネントベース設計の実例

以下は、Reactを用いたシンプルなコード例です。この例では、再利用可能な「Greeting」というコンポーネントを用いて、異なる名前に対して挨拶を表示しています😊。

### 📜 コード例

\`\`\`javascript
import React from 'react';

// Greetingコンポーネント：名前を受け取り挨拶メッセージを返す再利用可能な部品
function Greeting({ name }) {
  return <h2>Hello, {name}!</h2>;
}

// Appコンポーネント：Greetingコンポーネントを複数回使用してUIを構築
function App() {
  return (
    <div>
      <h1>My Application</h1>
      <Greeting name="Alice" />
      <Greeting name="Bob" />
      <Greeting name="Charlie" />
    </div>
  );
}

export default App;
\`\`\`

### 🔍 コードのポイント解説

- **Greetingコンポーネント**  
  - プロパティ（props）として「name」を受け取り、\`<h2>\`タグ内で動的に名前を表示します。  
  - このコンポーネントは、どの親コンポーネントからでも再利用できるため、同じロジックを使い回すことができます。

- **Appコンポーネント**  
  - アプリケーションのメインコンポーネントとして、\`<Greeting>\`コンポーネントを複数回呼び出しています。  
  - それぞれ異なる名前を渡すことで、同じコンポーネントを異なる目的に使い回すという「再利用性」を実現しています。

- **再利用可能なUI部品**  
  - 各コンポーネントは独立しているため、テストや保守がしやすい設計になっています。  
  - アプリケーション規模が大きくなっても、このようにコンポーネント単位で管理することで、全体の構造が明確になります。

このように、コンポーネントベース設計を採用することで、より効率的で保守性の高いコードを書くことができ、変更にも強いアプリケーションが構築できます😊。`,
        llm_model: "o3-mini",
      },
    ],
  },
  {
    chat_session_id: "126c4cf9-d058-4b7d-a59a-a20f75e41b28",
    messages: [
      {
        role: "user",
        content: "おいしいカレーのレシピを教えて",
        llm_model: "",
      },
    ],
  },
  {
    chat_session_id: "",
    messages: [
      {
        role: "assistant",
        content: `カレー作り、楽しみですね！ 🍛 美味しいカレーのレシピをいくつかご紹介します。今回は基本のレシピと、アレンジレシピをいくつか提案しますね。

### 基礎のカレーレシピ 🧑‍🍳

まずは基本のカレーから！

**材料（4人分）**

*   豚肉（または牛肉、鶏肉など）：300g
*   玉ねぎ：2個
*   じゃがいも：2個
*   にんじん：1本
*   サラダ油：大さじ2
*   水：600ml
*   カレールー：80g
*   ご飯：4人分

**作り方**

1.  **準備**：
    *   お肉は食べやすい大きさに切ります。
    *   玉ねぎは薄切りに、じゃがいもとにんじんは乱切りにします。
2.  **炒める**：
    *   鍋にサラダ油を熱し、お肉を炒めます。
    *   玉ねぎを加えて、飴色になるまで炒めます。（焦げ付かないように注意！）
    *   じゃがいもとにんじんを加えて軽く炒めます。
3.  **煮込む**：
    *   水を加えて沸騰させ、アクを取り除きます。
    *   弱火にして、野菜が柔らかくなるまで20分ほど煮込みます。
4.  **仕上げ**：
    *   いったん火を止め、カレールーを割り入れて溶かします。
    *   再び弱火でとろみがつくまで煮込めば完成！✨
5.  **盛り付け**：
    *   ご飯を盛り、カレーをかけて召し上がれ！

### アレンジレシピ 😋

基本のカレーに飽きたら、アレンジも試してみましょう！

#### 1. シーフードカレー 🐠

*   エビ、イカ、アサリなどを加えます。
*   ココナッツミルクを少し加えると、本格的な味わいに！

#### 2. チキンカレー 🐔

*   鶏もも肉を使い、ヨーグルトとカレー粉に漬け込んでから調理すると、より本格的な仕上がりに。
*   トマト缶を加えると、酸味とコクがプラスされます。

#### 3. 野菜たっぷりカレー 🥦

*   ナス、パプリカ、きのこ類など、お好みの野菜を加えて、ヘルシーに！
*   クミンやガラムマサラなどのスパイスを足すと、風味が増します。

### 美味しく作るコツ 💡

*   **玉ねぎはしっかり炒める**：玉ねぎの甘みがカレーの味を左右します！
*   **アクは丁寧に取り除く**：アクを取ることで、よりクリアな味わいに。
*   **隠し味をプラス**：
    *   ウスターソース：コクと深みが増します。
    *   ケチャップ：甘みと酸味をプラス。
    *   はちみつ：まろやかな甘さに。
    *   インスタントコーヒー：苦味が加わり、大人の味に。

色々なアレンジを試して、自分だけのオリジナルカレーを見つけてくださいね！ 😋 どんなカレーを作るか、今からワクワクしますね！😊
`,
        llm_model: "gemini-2.0-flash-lite",
      },
    ],
  },
];
